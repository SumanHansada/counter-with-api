{"version":3,"sources":["Counter.js","CounterValue.js","App.js","reportWebVitals.js","index.js"],"names":["Counter","props","useState","count","setCount","minValue","setMinValue","maxValue","setMaxValue","error","setError","loading","setLoading","saveCounter","newCount","a","fetch","method","body","JSON","stringify","counter1","headers","response","className","style","display","flexDirection","InputGroup","width","Prepend","Text","FormControl","id","onChange","event","value","target","Number","Spinner","animation","role","size","Button","variant","onClick","privCount","then","status","Error","updateCounterValueComponent","catch","err","console","log","disabled","aria-label","Append","Alert","onClose","dismissible","CounterValue","forwardRef","ref","useImperativeHandle","fetchCounterValue","res","json","App","cvInstance","useRef","current","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c8a27b33.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Button,\n  InputGroup,\n  FormControl,\n  Alert,\n  Spinner,\n} from 'react-bootstrap';\n\nfunction Counter(props) {\n  const [count, setCount] = useState(1);\n  const [minValue, setMinValue] = useState(1);\n  const [maxValue, setMaxValue] = useState(1000);\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const handleMinValueChange = (event) => {\n    const { value } = event.target;\n    setMinValue(Number(value));\n  };\n\n  const handleMaxValueChange = (event) => {\n    const { value } = event.target;\n    setMaxValue(Number(value));\n  };\n\n  const handleIncrement = () => {\n    if (count + 1 > maxValue) {\n      setError(true);\n      setCount((privCount) => Number(privCount));\n    } else {\n      setLoading(true);\n      saveCounter(count + 1)\n        .then((response) => {\n          if (response.status === 200) {\n            setLoading(false);\n            setError(false);\n            setCount((privCount) => Number(privCount) + 1);\n            props.updateCounterValueComponent();\n          } else {\n            throw new Error('Counter value not saved');\n          }\n        })\n        .catch((err) => {\n          setLoading(false);\n          console.log(err);\n        });\n    }\n  };\n\n  const handleDecrement = () => {\n    if (count - 1 < minValue) {\n      setError(true);\n      setCount((privCount) => Number(privCount));\n    } else {\n      setLoading(true);\n      saveCounter(count - 1)\n        .then((response) => {\n          if (response.status === 200) {\n            setLoading(false);\n            setError(false);\n            setCount((privCount) => Number(privCount) - 1);\n            props.updateCounterValueComponent();\n          } else {\n            throw new Error('Counter value not saved');\n          }\n        })\n        .catch((err) => {\n          setLoading(false);\n          console.log(err);\n        });\n    }\n  };\n\n  const handleValueChange = (event) => {\n    const { value } = event.target;\n    if (Number(value) >= minValue && Number(value) <= maxValue) {\n      setLoading(true);\n      saveCounter(Number(value))\n        .then((response) => {\n          if (response.status === 200) {\n            setLoading(false);\n            setError(false);\n            setCount(Number(value));\n            props.updateCounterValueComponent();\n          } else {\n            throw new Error('Counter value not saved');\n          }\n        })\n        .catch((err) => {\n          setLoading(false);\n          console.log(err);\n        });\n    } else setError(true);\n  };\n\n  const saveCounter = async (newCount) => {\n    const response = await fetch(\n      'https://interview-8e4c5-default-rtdb.firebaseio.com/front-end.json',\n      {\n        method: 'PUT',\n        body: JSON.stringify({\n          counter1: newCount,\n        }),\n        headers: {\n          'Content-type': 'application/json; charset=UTF-8',\n        },\n      }\n    );\n    return response;\n  };\n\n  return (\n    <div\n      className=\"container mt-5\"\n      style={{ display: 'flex', flexDirection: 'column' }}\n    >\n      <h2 className=\"counter-theme\">Counter</h2>\n      <InputGroup style={{ width: '175px' }} className=\"mb-3\">\n        <InputGroup.Prepend>\n          <InputGroup.Text>Min Value</InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl\n          className=\"counter-theme\"\n          id=\"minValue\"\n          onChange={handleMinValueChange}\n        />\n      </InputGroup>\n      <InputGroup style={{ width: '175px' }} className=\"mb-3\">\n        <InputGroup.Prepend>\n          <InputGroup.Text>Max Value</InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl\n          className=\"counter-theme\"\n          id=\"maxValue\"\n          onChange={handleMaxValueChange}\n        />\n      </InputGroup>\n      {loading && (\n        <div className=\"left-align mb-2\" >\n          <Spinner animation=\"border\" role=\"status\" size=\"sm\" className=\"mr-2\">\n            <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n          Saving counter value\n        </div>\n      )}\n      <InputGroup style={{ width: '175px' }} className=\"mb-3\">\n        <InputGroup.Prepend>\n          <Button\n            variant=\"outline-danger\"\n            onClick={handleDecrement}\n            disabled={loading}\n          >\n            -\n          </Button>\n        </InputGroup.Prepend>\n        <FormControl\n          className=\"counter-theme\"\n          value={count}\n          aria-label=\"Count\"\n          onChange={handleValueChange}\n        />\n        <InputGroup.Append>\n          <Button\n            variant=\"outline-danger\"\n            onClick={handleIncrement}\n            disabled={loading}\n          >\n            +\n          </Button>\n        </InputGroup.Append>\n      </InputGroup>\n      {error && (\n        <Alert onClose={() => setError(false)} variant=\"danger\" dismissible>\n          Counter value should be between {minValue} and {maxValue} (inclusive)\n        </Alert>\n      )}\n    </div>\n  );\n}\n\nexport default Counter;\n","import React, { forwardRef, useImperativeHandle, useState } from 'react';\n\nconst CounterValue = forwardRef((props, ref) => {\n  // The component instance will be extended\n  // with whatever you return from the callback passed\n  // as the second argument\n  const [count, setCount] = useState(1);\n  useImperativeHandle(ref, () => ({\n    async fetchCounterValue() {\n      await fetch(\n        'https://interview-8e4c5-default-rtdb.firebaseio.com/front-end/counter1.json',\n        {\n          method: 'GET',\n        }\n      )\n        .then((res) => res.json())\n        .then((response) => {\n          setCount(response);\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    },\n  }));\n  return <div className=\"container left-align\">Counter Value: {count}</div>;\n});\n\nexport default CounterValue;\n","import './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Counter from './Counter';\nimport CounterValue from './CounterValue';\nimport { useRef } from 'react';\n\nfunction App() {  \n  const cvInstance = useRef();\n  return (\n    <div className=\"App\">\n      <Counter updateCounterValueComponent={() => cvInstance.current.fetchCounterValue()} />\n      <CounterValue ref={cvInstance} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}